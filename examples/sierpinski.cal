include "cores/select.cal"

func man sierpinski cell n begin
	let cell n
	let cell x
	let cell y
	let cell pad
	2 * -> n

	0 -> y
	n 2 / -> pad

	while y n 2 / < do
		0 -> x

		while x pad < do
			' ' print_ch
			x 1 + -> x
		end

		0 -> x

		while x n 2 / < do
			# x & y
			#    creates an (upside down) sierpinski triangle, all by itself, that's
			#    pretty cool
			# x & ~y 
			#    this creates a sierpinski triangle too except it's the right way up.
			#    the not operator flips the whole thing. i think it's interesting how
			#    bitwise operators can work with a sierpinski triangle so easily
			if x y not and then
				' ' print_ch
			else
				'*' print_ch
			end
			' ' print_ch

			x 1 + -> x
		end

		y 1 + -> y
		pad 1 - -> pad
		13 print_ch 10 print_ch
	end
end

16 sierpinski
